---
import Socials from '@/components/Socials.astro';

interface Props {
  title: string;
  hasFooter?: boolean;
}

const { title, hasFooter = true } = Astro.props;

const pathname = new URL(Astro.request.url).pathname;
let activePath = pathname;
if (pathname.length > 1 && pathname.at(-1) === '/') {
  activePath = pathname.slice(0, -1);
}
---

<script>
  function setClass(isDark: boolean) {
    if (isDark) {
      html?.classList.remove('theme-light');
      html?.classList.add('theme-dark');
    } else {
      html?.classList.remove('theme-dark');
      html?.classList.add('theme-light');
    }
  }

  const html = document.querySelector('html');
  const prefersDarkTheme = window.matchMedia('(prefers-color-scheme: dark)');
  const local = localStorage.getItem('isDark');
  let isDark = local ? local === 'true' : prefersDarkTheme.matches;

  const themeToggle: HTMLInputElement | null = document.querySelector('#themeToggle');
  if (themeToggle) {
    themeToggle.checked = isDark;
  }

  themeToggle?.addEventListener('click', () => {
    isDark = !isDark;
    localStorage.setItem('isDark', String(isDark));
    setClass(isDark);
  });
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="stylesheet" href="https://use.typekit.net/akb2jka.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Archivo:ital,wght@0,100..900;1,100..900&family=DM+Mono:ital,wght@0,300;0,400;0,500;1,300;1,400;1,500&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script is:inline>
      function setClass(isDark) {
        if (isDark) {
          html?.classList.remove('theme-light');
          html?.classList.add('theme-dark');
        } else {
          html?.classList.remove('theme-dark');
          html?.classList.add('theme-light');
        }
      }

      const html = document.querySelector('html');
      const prefersDarkTheme = window.matchMedia('(prefers-color-scheme: dark)');
      const local = localStorage.getItem('isDark');
      setClass(local ? local === 'true' : prefersDarkTheme.matches);
    </script>
  </head>
  <body>
    <svg width="0" height="0">
      <filter id="blur-and-scale" x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blurred"></feGaussianBlur>
        <feColorMatrix type="saturate" in="blurred" values="4"></feColorMatrix>
        <feComposite in="SourceGraphic" operator="over"></feComposite>
      </filter>
    </svg>
    <header>
      <nav class="primary-nav">
        <ul class="nav-list">
          <li class="nav-item">
            <a href="/" class={`nav-link${activePath === '/' ? ' active' : ''}`}>Home</a>
          </li>
          <li class="nav-item">
            <a href="/about" class={`nav-link${activePath === '/about' ? ' active' : ''}`}>About</a>
          </li>
          <li class="nav-item">
            <a href="/resume.pdf" class="nav-link">Resume</a>
          </li>
          <li class="nav-item">
            <a href="/contact" class={`nav-link${activePath === '/contact' ? ' active' : ''}`}>Contact</a>
          </li>
        </ul>
        <div class="switch">
          <input id="themeToggle" type="checkbox" />
          <label id="themeToggleLabel" aria-label="Dark mode" for="themeToggle">
            <div class="switch-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                width="24"
                height="24"
                stroke-width="1.5"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
                ></path>
              </svg>
            </div>
            <div class="switch-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                width="24"
                height="24"
                stroke-width="1.5"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
                ></path>
              </svg>
            </div>
          </label>
        </div>
      </nav>
    </header>
    <main>
      <slot />
    </main>
    {
      hasFooter && (
        <footer>
          <Socials />
        </footer>
      )
    }
  </body>
</html>

<style is:global lang="scss">
  @mixin theme-dark() {
    --accent: 255, 147, 47;
    --accent-dark: 255, 123, 0;
    --accent-light: 255, 184, 118;
    --accent-secondary: 13, 40, 76;
    --accent-gradient: linear-gradient(45deg, rgb(var(--accent-dark)), rgb(var(--accent-light)) 30%, white 60%);
    --dark: 4, 2, 8;

    --foreground: 241, 247, 255;
    --background: 19, 21, 26;
    --background-subtle: 35, 38, 45;
  }

  @mixin theme-light() {
    --accent: 255, 147, 47;
    --accent-dark: 255, 123, 0;
    --accent-light: 255, 184, 118;
    --accent-secondary: 117, 165, 228;
    --accent-gradient: linear-gradient(45deg, rgb(var(--accent-dark)), rgb(var(--accent-light)) 30%, white 60%);
    --dark: 4, 2, 8;

    --foreground: 19, 21, 26;
    --background: 244, 244, 244;
    --background-subtle: 230, 230, 230;
  }

  :root {
    --fs-body: 1.125rem;
    --fs-content: 1.25rem;
    --fs-subtle: 1rem;

    --font-body: 'Inter', sans-serif;
    --font-mono: 'DM Mono', monospace;
  }

  html {
    @include theme-light();
  }

  html.theme-dark {
    @include theme-dark();
  }

  @media (prefers-color-scheme: dark) {
    html {
      color-scheme: dark;
      @include theme-dark();
    }

    html.theme-light {
      @include theme-light();
    }
  }

  /* @font-face {
    font-family: 'Inter';
    src:
      url('Inter-VariableFont_opsz,wght.ttf') format('ttf supports variations'),
      url('Inter-VariableFont_opsz,wght.ttf') format('ttf-variations');
    font-weight: 100 900;
  }*/

  /* @font-face {
    font-family: 'Inconsolata';
    src:
      url('Inconsolata-VariableFont_wdth,wght.ttf') format('ttf supports variations'),
      url('Inconsolata-VariableFont_wdth,wght.ttf') format('ttf-variations');
    font-weight: 200 900;
  } */

  /* @font-face {
    font-family: 'Red Hat';
    src:
      url('RedHatDisplay-VariableFont_wght.ttf') format('ttf supports variations'),
      url('RedHatDisplay-VariableFont_wght.ttf') format('ttf-variations');
    font-weight: 300 900;
  } */

  html {
    font-family: var(--font-body);
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;
    background: rgb(var(--background));
    color: rgb(var(--foreground));
  }

  body {
    font-size: var(--fs-body);
  }

  header {
    display: grid;
    grid-template-columns: 1fr;
    justify-content: center;
    justify-items: center;
    align-items: center;
  }

  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: rgb(var(--foreground));
  }

  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
    font-weight: 800;
  }

  h1,
  p {
    line-height: 1.5;
  }

  a {
    color: #2f88ef;

    &:hover {
      color: rgb(var(--accent));
    }
  }

  .blur {
    filter: url(#blur-and-scale);
  }

  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }

  .primary-nav {
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: auto auto;
    gap: 0.5rem;
    justify-items: center;
    border-radius: calc(1rem + 4px);
    padding: 4px;
    background: rgb(var(--foreground));
    text-align: center;
  }

  .nav-list {
    display: flex;
    align-items: stretch;
    gap: 0;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .nav-item {
    display: flex;
  }

  .nav-link {
    display: flex;
    align-items: center;
    border-radius: 1rem;
    padding: 0.25rem 0.75rem;
    color: rgb(var(--background));
    text-decoration: none;
    font-size: var(--fs-subtle);

    &:not(.active):hover {
      color: rgb(var(--accent-secondary));
      text-decoration: underline;
      text-decoration-thickness: 2px;
      text-decoration-color: rgba(var(--accent-secondary));
    }

    &.active {
      color: rgb(var(--foreground));
      background: rgb(var(--accent-secondary));
    }
  }

  .switch-li {
    align-content: center;
    padding-left: 0.75rem;
  }

  .switch-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.25rem;
  }

  .switch {
    position: relative;
    height: 100%;
    grid-row: 2;

    svg {
      display: block;
      height: 1rem;
      width: auto;
      color: rgb(var(--foreground));
      z-index: 10;
    }

    input[type='checkbox'] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;

      &:checked + label::before {
        transform: translateX(calc(100% + 4px)) scale(125%);
        // right: 0;
        transition: all 0.1s;
        // left: unset;
      }

      &:focus + label {
        outline: 2px solid #2f88ef;
      }
    }

    label {
      cursor: pointer;
      display: grid;
      grid-template-columns: 1fr 1fr;
      align-items: center;
      gap: 4px;
      height: 100%;
      background: rgb(var(--background));
      border-radius: calc(1rem + 4px);
    }

    label::before {
      position: absolute;
      left: 0;
      content: '';
      height: 1rem;
      border-radius: 50%;
      padding: 0.25rem;
      aspect-ratio: 1/1;
      background: rgb(var(--accent));
      transform: scale(125%);
      transition: all 0.1s;
    }
  }

  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-color: rgb(var(--background-subtle));
    background-image: none;
    background-size: 400%;
    border-radius: 8px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  .card-link {
    display: grid;
    grid-template-columns: 2fr 1fr;
    align-items: start;
    gap: 0.5rem;
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: var(--foreground);
    background-color: rgb(var(--background-subtle));
  }

  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);

    & .card-link {
      opacity: 0.9;
    }

    & h2 {
      // color: rgb(var(--accent));
      color: rgb(var(--foreground));
    }
  }

  @media (min-width: 640px) {
    .primary-nav {
      grid-template-rows: auto;
    }

    .nav-list {
      grid-row: 1;
    }

    .switch {
      grid-row: 1;
    }

    .card-link {
      gap: 1rem;
    }
  }

  @media (min-width: 768px) {
    .nav-list {
      gap: 0.5rem;
    }
  }
</style>
